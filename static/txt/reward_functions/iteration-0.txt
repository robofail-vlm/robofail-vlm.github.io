def compute_dense_reward(self, obs: Any, action: torch.Tensor, info: Dict):
    # Distance from the TCP (Tool Center Point) to cubeA
    tcp_to_cubeA_dist = torch.linalg.norm(
    self.cubeA.pose.p - self.agent.tcp.pose.p, axis=1
    )
    reaching_reward = 1 - torch.tanh(5 * tcp_to_cubeA_dist)
    reward = reaching_reward

    # Reward for grasping cubeA
    is_cubeA_grasped = info["is_cubeA_grasped"]
    reward += is_cubeA_grasped

    # Distance from cubeA to cubeB
    cubeA_to_cubeB_dist = torch.linalg.norm(
    self.cubeB.pose.p - self.cubeA.pose.p, axis=1
    )
    stacking_reward = 1 - torch.tanh(5 * cubeA_to_cubeB_dist)
    reward += stacking_reward * is_cubeA_grasped

    # Reward for keeping cubeA static
    is_cubeA_static = info["is_cubeA_static"]
    static_reward = 1 - torch.tanh(5 * torch.linalg.norm(self.agent.robot.get_qvel()[..., :-2], axis=1))
    reward += static_reward * info["is_cubeA_on_cubeB"]

    # Final success reward
    reward[info["success"]] = 8
    return reward
